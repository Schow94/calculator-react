{"version":3,"sources":["components/Button.js","components/App.js","components/Input.js","components/Calculator.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","props","a","createElement","className","onClick","handleClick","children","App","state","input","addToInput","val","console","log","_this","setState","cleaner","replace","eval","equals","percent","percentage","toggle","num","handleClear","react__WEBPACK_IMPORTED_MODULE_5___default","style","textAlign","_Input__WEBPACK_IMPORTED_MODULE_7__","this","_Button__WEBPACK_IMPORTED_MODULE_6__","Component","Input","str","checkString","undefined","newStr","toString","length","substring","trim","Calculator","_Button__WEBPACK_IMPORTED_MODULE_1__","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","react_default","document","querySelector","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.edba9d3e.chunk.js","sourcesContent":["import React from 'react';\n\n// - Output.js - renders a div with our result\nconst Button = props => {\n  return (\n    <div\n      className=\"button output\"\n      onClick={() => {\n        // console.log(props);\n        props.handleClick(props.children);\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from './Button';\nimport Input from './Input';\nimport Calculator from './Calculator';\n\n// App.js - Contains all the calculation logic and state of application\nclass App extends Component {\n  //initial state\n  state = {\n    input: ''\n  };\n\n  //checks if val is a num\n  // checkNum = val => {\n  //   const num = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  //   const numVal = parseFloat(val);\n  //   // console.log(numVal);\n  //   if (num.includes(numVal)) {\n  //     //if val is a num, returns val\n  //     this.setState({ input: numVal });\n  //   }\n  // };\n\n  // update input - Nothing is going from addToInput to onClick\n  addToInput = val => {\n    console.log('input: ' + this.state.input);\n    console.log('val: ' + val);\n    return this.setState({ input: this.state.input + val });\n  };\n\n  // Sanitizes math operators\n  cleaner = input => {\n    input = this.state.input.replace(/x/g, '*').replace(/รท/g, '/');\n    return this.setState({ input: eval(input) });\n  };\n\n  // Evaluates math after operators are cleaned up\n  equals = (input, cleaner) => {\n    console.log('input is: ' + input);\n    console.log('input from app.js is: ' + input);\n    if (!this.state.input) {\n      return;\n    } else {\n      this.cleaner(input);\n    }\n  };\n\n  percent = () => {\n    const percentage = this.state.input / 100;\n    this.setState({ input: percentage });\n  };\n\n  toggle = () => {\n    const num = this.state.input * -1;\n    this.setState({ input: num });\n  };\n\n  handleClear = () => {\n    this.setState({ input: '' });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: 'center' }}>Calculator App</h1>\n\n        <div className=\"calculator-body\">\n          <Input input={this.state.input} />\n          {/* Trying put all <Buttons /> in a Calculator Component */}\n          {/* <Calculator input={this.state.input} /> */}\n\n          <div className=\"row\">\n            <Button handleClick={this.handleClear}>AC</Button>\n            <Button handleClick={this.toggle}>+/-</Button>\n            <Button handleClick={this.percent}>%</Button>\n            <Button handleClick={this.addToInput}>รท</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>x</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"zero\">\n              <Button className=\"zero\" handleClick={this.addToInput}>\n                0\n              </Button>\n            </div>\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.equals}>=</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\n// Input.js  - Renders all of our buttons and onClick event handlers\n//not sure exactly what onCLick is doing\n// want to update result with whatever I am clicking. almost like a form that updates live.\n//need a this.setState somewhere\n\nconst Input = props => {\n  const checkString = str => {\n    if (typeof string === undefined) {\n      return '';\n    } else if (typeof str === 'string') {\n      return str;\n    } else if (typeof str === 'number') {\n      const newStr = str.toString();\n      if (newStr.length <= 8) {\n        return newStr;\n      }\n      return newStr.substring(0, 10);\n    }\n    return '';\n  };\n\n  // console.log('display type is:  ' + typeof display);\n  // console.log('props.input: ' + props.input);\n\n  const trim = (str, checkString) => {\n    console.log('props.input is a ' + typeof str);\n    console.log('str is ' + str);\n    if (typeof str === undefined) {\n      return '';\n    }\n    if (typeof str === 'string') {\n      return str;\n    } else if (typeof str === 'number') {\n      const newStr = str.toString();\n      if (newStr.length <= 8) {\n        return newStr;\n      }\n      return newStr.substring(0, 10);\n    }\n    return '';\n    // this.checkString(str);\n  };\n\n  return <div className=\"input\">{trim(props.input)}</div>;\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport Button from './Button';\n\n// App.js - Contains all the calculation logic and state of application\nconst Calculator = props => {\n  // update input - Nothing is going from addToInput to onClick\n  const addToInput = val => {\n    console.log('input: ' + props.input);\n    console.log('val: ' + val);\n    return this.setState({ input: this.state.input + val });\n  };\n\n  // Sanitizes math operators\n  const cleaner = props => {\n    props.input = props.input.replace(/x/g, '*').replace(/รท/g, '/');\n    return this.setState({ input: eval(props.input) });\n  };\n\n  // Evaluates math after operators are cleaned up\n  const equals = (props, cleaner) => {\n    console.log('input is: ' + props.input);\n    console.log('input from app.js is: ' + props.input);\n    if (!props.input) {\n      return;\n    } else {\n      this.cleaner(props.input);\n    }\n  };\n\n  const percent = () => {\n    const percentage = this.state.input / 100;\n    this.setState({ input: percentage });\n  };\n\n  const toggle = () => {\n    const num = this.state.input * -1;\n    this.setState({ input: num });\n  };\n\n  // Not sure why, but cannot read property 'handleClear of undefined'\n  const handleClear = () => {\n    this.setState({ input: '' });\n  };\n\n  return (\n    <div>\n      <div className=\"calculator-body\">\n        <div className=\"row\">\n          <Button handleClick={this.handleClear}>AC</Button>\n          <Button handleClick={this.toggle}>+/-</Button>\n          <Button handleClick={this.percent}>%</Button>\n          <Button handleClick={this.addToInput}>รท</Button>\n        </div>\n\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>7</Button>\n          <Button handleClick={this.addToInput}>8</Button>\n          <Button handleClick={this.addToInput}>9</Button>\n          <Button handleClick={this.addToInput}>x</Button>\n        </div>\n\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>4</Button>\n          <Button handleClick={this.addToInput}>5</Button>\n          <Button handleClick={this.addToInput}>6</Button>\n          <Button handleClick={this.addToInput}>-</Button>\n        </div>\n\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>1</Button>\n          <Button handleClick={this.addToInput}>2</Button>\n          <Button handleClick={this.addToInput}>3</Button>\n          <Button handleClick={this.addToInput}>+</Button>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"zero\">\n            <Button className=\"zero\" handleClick={this.addToInput}>\n              0\n            </Button>\n          </div>\n          <Button handleClick={this.addToInput}>.</Button>\n          <Button handleClick={this.equals}>=</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}